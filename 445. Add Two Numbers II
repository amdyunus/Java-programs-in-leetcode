/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result=new ListNode(0);
        ListNode ptr=result;
        ListNode list1=reverselist(l1);
        ListNode list2=reverselist(l2);
        int carry=0;
        while(list1!=null || list2!=null){
            int sum=0+carry;
            if(list1!=null){
                sum+=list1.val;
                list1=list1.next;
            }

            if(list2!=null){
                sum+=list2.val;
                list2=list2.next;
            }
            carry=sum/10;
            sum=sum%10;
            ptr.next=new ListNode(sum);
            ptr=ptr.next;
        }
        if(carry==1)ptr.next=new ListNode(1);
        return reverselist(result.next);
    }
    ListNode reverselist(ListNode head){
        if(head==null){
            return head;
        }
        ListNode prev=null;
        ListNode present=head;
        ListNode next=present.next;
        while(present!=null){
            present.next=prev;
            prev=present;
            present=next;
            if(next!=null){
                next=next.next;
            }
        }
        return prev;
    }
}
